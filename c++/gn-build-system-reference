# GN Build System Reference

## Introduction

GN ("Generate Ninja") is a meta-build system developed by Google. Instead of writing low-level Ninja files by hand, you declare your build targets, dependencies, and configuration in GN script files. GN then generates efficient Ninja build rules, which Ninja uses to perform fast, parallelized builds. GN is used by large-scale projects like Chromium and Skia to manage complex build graphs in a modular, maintainable way.

Key points:

* **Declarative syntax**: Describe what to build and how, without boilerplate.
* **Modularity**: Split shared settings into include files (`.gni`) and per-directory targets into `BUILD.gn` files.
* **Speed**: GN’s parse-and-generate phase is optimized for large codebases.

## Built-in Keywords in `.gn` and `.gni` Files

Below is a categorized list of built-in keywords and functions you’ll use in GN scripts, with brief descriptions.

---

### 1. Target-Declaration Functions

These top-level functions define build outputs in `BUILD.gn`:

| Keyword           | Description                                                         |
| ----------------- | ------------------------------------------------------------------- |
| `action`          | Run a script once to produce one or more outputs.                   |
| `action_foreach`  | Run a script once per input file, producing per-file outputs.       |
| `bundle_data`     | *(iOS/macOS)* Declare a bundle data target with no compiled output. |
| `copy`            | Copy files into the output tree.                                    |
| `create_bundle`   | *(iOS/macOS)* Package an app or framework bundle.                   |
| `executable`      | Compile and link an executable binary.                              |
| `generated_file`  | Declare a file that will be generated by a script.                  |
| `group`           | Define a named grouping of other targets (no outputs of its own).   |
| `loadable_module` | Build a dynamically-loadable module (e.g. plugin or shared object). |
| `rust_library`    | Compile a Rust library (crate).                                     |
| `rust_proc_macro` | Compile a Rust procedural-macro crate.                              |
| `shared_library`  | Compile and link a shared library.                                  |
| `source_set`      | Compile object files without producing a final library/binary.      |
| `static_library`  | Create a static archive (`.a`/`.lib`).                              |
| `target`          | Define a custom-typed target via a programmatic interface.          |

---

### 2. Buildfile Functions and Statements

Used for configuration, data manipulation, and control within `BUILD.gn`/`.gni`:

| Keyword                  | Description                                                                   |
| ------------------------ | ----------------------------------------------------------------------------- |
| `assert`                 | Fail generation if the given expression is false.                             |
| `config`                 | Declare a reusable configuration object.                                      |
| `declare_args`           | Define build-time arguments (e.g., `is_debug`, `target_os`).                  |
| `defined`                | Test whether a variable or argument is defined.                               |
| `exec_script`            | Run a script synchronously at generate time and capture its output.           |
| `filter_exclude`         | Remove list elements matching given patterns.                                 |
| `filter_include`         | Keep only list elements matching given patterns.                              |
| `filter_labels_exclude`  | Like `filter_exclude`, but works on label lists.                              |
| `filter_labels_include`  | Like `filter_include`, but works on label lists.                              |
| `foreach`                | Loop over items in a list.                                                    |
| `forward_variables_from` | Import variables from another scope (e.g., a different target).               |
| `get_label_info`         | Query attributes (outputs, include\_dirs, etc.) of another target.            |
| `get_path_info`          | Split a file or directory path into components.                               |
| `get_target_outputs`     | Get the output file list for a given target.                                  |
| `getenv`                 | Read an environment variable.                                                 |
| `import`                 | Include another `.gni` or `BUILD.gn` into the current scope.                  |
| `label_matches`          | Test if a label matches any of a set of patterns.                             |
| `not_needed`             | Mark variables as “not needed” to silence unused-variable warnings.           |
| `path_exists`            | Test whether a file or directory exists.                                      |
| `pool`                   | Define a Ninja pool (limits parallelism for a set of rules).                  |
| `print`                  | Emit a message to the console during generation.                              |
| `print_stack_trace`      | Print the GN call stack (useful for debugging `.gn` logic).                   |
| `process_file_template`  | Expand variables inside a list of input files and write out a processed copy. |
| `read_file`              | Read the contents of a file into a string variable.                           |
| `rebase_path`            | Rebase a path from one root (source tree) to another (build dir).             |
| `set_default_toolchain`  | Specify which toolchain to use by default.                                    |
| `set_defaults`           | Provide default values for any target type or template.                       |
| `split_list`             | Divide a list into *N* sub-lists (useful for sharding).                       |
| `string_join`            | Join a list of strings with a separator.                                      |
| `string_replace`         | Replace substrings in a string.                                               |
| `string_split`           | Split a string into a list on a delimiter.                                    |
| `template`               | Define a new template (custom function) in a `.gni` for reuse.                |
| `tool`                   | Configure a specific tool (compiler, linker, etc.) in a `toolchain` block.    |
| `toolchain`              | Define a toolchain (sets of compilers, flags, and variables).                 |
| `write_file`             | Write a string or list of strings out to a file.                              |

---

### 3. Control-Flow and Literals

Core language constructs:

| Keyword | Description                     |
| ------- | ------------------------------- |
| `if`    | Conditional execution:          |
|         | \`\`\`gn                        |
|         | if (condition) { … } else { … } |
|         | \`\`\`                          |
| `else`  | Alternate branch in an `if`.    |
| `true`  | Boolean literal `true`.         |
| `false` | Boolean literal `false`.        |
| `null`  | Empty or unset value.           |

---

## Further Reading

* Run `gn help --all` in your GN checkout.
* Online reference: [https://gn.googlesource.com/gn/+/main/docs/reference.md](https://gn.googlesource.com/gn/+/main/docs/reference.md)
